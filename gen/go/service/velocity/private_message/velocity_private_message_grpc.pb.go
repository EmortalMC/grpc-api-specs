// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: velocity/velocity_private_message.proto

package private_message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VelocityPrivateMessageClient is the client API for VelocityPrivateMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VelocityPrivateMessageClient interface {
	ReceiveMessage(ctx context.Context, in *PrivateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type velocityPrivateMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewVelocityPrivateMessageClient(cc grpc.ClientConnInterface) VelocityPrivateMessageClient {
	return &velocityPrivateMessageClient{cc}
}

func (c *velocityPrivateMessageClient) ReceiveMessage(ctx context.Context, in *PrivateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.velocity.private_message.VelocityPrivateMessage/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VelocityPrivateMessageServer is the server API for VelocityPrivateMessage service.
// All implementations must embed UnimplementedVelocityPrivateMessageServer
// for forward compatibility
type VelocityPrivateMessageServer interface {
	ReceiveMessage(context.Context, *PrivateMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedVelocityPrivateMessageServer()
}

// UnimplementedVelocityPrivateMessageServer must be embedded to have forward compatible implementations.
type UnimplementedVelocityPrivateMessageServer struct {
}

func (UnimplementedVelocityPrivateMessageServer) ReceiveMessage(context.Context, *PrivateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedVelocityPrivateMessageServer) mustEmbedUnimplementedVelocityPrivateMessageServer() {
}

// UnsafeVelocityPrivateMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VelocityPrivateMessageServer will
// result in compilation errors.
type UnsafeVelocityPrivateMessageServer interface {
	mustEmbedUnimplementedVelocityPrivateMessageServer()
}

func RegisterVelocityPrivateMessageServer(s grpc.ServiceRegistrar, srv VelocityPrivateMessageServer) {
	s.RegisterService(&VelocityPrivateMessage_ServiceDesc, srv)
}

func _VelocityPrivateMessage_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VelocityPrivateMessageServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.velocity.private_message.VelocityPrivateMessage/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VelocityPrivateMessageServer).ReceiveMessage(ctx, req.(*PrivateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// VelocityPrivateMessage_ServiceDesc is the grpc.ServiceDesc for VelocityPrivateMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VelocityPrivateMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "towerdefence.cc.service.velocity.private_message.VelocityPrivateMessage",
	HandlerType: (*VelocityPrivateMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMessage",
			Handler:    _VelocityPrivateMessage_ReceiveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "velocity/velocity_private_message.proto",
}
