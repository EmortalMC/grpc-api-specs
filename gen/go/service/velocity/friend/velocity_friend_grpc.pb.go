// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: velocity/velocity_friend.proto

package friend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VelocityFriendClient is the client API for VelocityFriend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VelocityFriendClient interface {
	ReceiveFriendRequest(ctx context.Context, in *ReceiveFriendRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReceiveFriendAdded(ctx context.Context, in *ReceiveFriendAddedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReceiveFriendRemoved(ctx context.Context, in *ReceiveFriendRemovedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type velocityFriendClient struct {
	cc grpc.ClientConnInterface
}

func NewVelocityFriendClient(cc grpc.ClientConnInterface) VelocityFriendClient {
	return &velocityFriendClient{cc}
}

func (c *velocityFriendClient) ReceiveFriendRequest(ctx context.Context, in *ReceiveFriendRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *velocityFriendClient) ReceiveFriendAdded(ctx context.Context, in *ReceiveFriendAddedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *velocityFriendClient) ReceiveFriendRemoved(ctx context.Context, in *ReceiveFriendRemovedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendRemoved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VelocityFriendServer is the server API for VelocityFriend service.
// All implementations must embed UnimplementedVelocityFriendServer
// for forward compatibility
type VelocityFriendServer interface {
	ReceiveFriendRequest(context.Context, *ReceiveFriendRequestRequest) (*emptypb.Empty, error)
	ReceiveFriendAdded(context.Context, *ReceiveFriendAddedRequest) (*emptypb.Empty, error)
	ReceiveFriendRemoved(context.Context, *ReceiveFriendRemovedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVelocityFriendServer()
}

// UnimplementedVelocityFriendServer must be embedded to have forward compatible implementations.
type UnimplementedVelocityFriendServer struct {
}

func (UnimplementedVelocityFriendServer) ReceiveFriendRequest(context.Context, *ReceiveFriendRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFriendRequest not implemented")
}
func (UnimplementedVelocityFriendServer) ReceiveFriendAdded(context.Context, *ReceiveFriendAddedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFriendAdded not implemented")
}
func (UnimplementedVelocityFriendServer) ReceiveFriendRemoved(context.Context, *ReceiveFriendRemovedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFriendRemoved not implemented")
}
func (UnimplementedVelocityFriendServer) mustEmbedUnimplementedVelocityFriendServer() {}

// UnsafeVelocityFriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VelocityFriendServer will
// result in compilation errors.
type UnsafeVelocityFriendServer interface {
	mustEmbedUnimplementedVelocityFriendServer()
}

func RegisterVelocityFriendServer(s grpc.ServiceRegistrar, srv VelocityFriendServer) {
	s.RegisterService(&VelocityFriend_ServiceDesc, srv)
}

func _VelocityFriend_ReceiveFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VelocityFriendServer).ReceiveFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VelocityFriendServer).ReceiveFriendRequest(ctx, req.(*ReceiveFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VelocityFriend_ReceiveFriendAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveFriendAddedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VelocityFriendServer).ReceiveFriendAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VelocityFriendServer).ReceiveFriendAdded(ctx, req.(*ReceiveFriendAddedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VelocityFriend_ReceiveFriendRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveFriendRemovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VelocityFriendServer).ReceiveFriendRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.velocity.friend.VelocityFriend/ReceiveFriendRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VelocityFriendServer).ReceiveFriendRemoved(ctx, req.(*ReceiveFriendRemovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VelocityFriend_ServiceDesc is the grpc.ServiceDesc for VelocityFriend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VelocityFriend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "towerdefence.cc.service.velocity.friend.VelocityFriend",
	HandlerType: (*VelocityFriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveFriendRequest",
			Handler:    _VelocityFriend_ReceiveFriendRequest_Handler,
		},
		{
			MethodName: "ReceiveFriendAdded",
			Handler:    _VelocityFriend_ReceiveFriendAdded_Handler,
		},
		{
			MethodName: "ReceiveFriendRemoved",
			Handler:    _VelocityFriend_ReceiveFriendRemoved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "velocity/velocity_friend.proto",
}
