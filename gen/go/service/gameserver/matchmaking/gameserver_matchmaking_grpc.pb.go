// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: gameserver/gameserver_matchmaking.proto

package matchmaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServerMatchmakingClient is the client API for GameServerMatchmaking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerMatchmakingClient interface {
	MatchFound(ctx context.Context, in *MatchFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MatchCancelled(ctx context.Context, in *MatchCancelledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameServerMatchmakingClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerMatchmakingClient(cc grpc.ClientConnInterface) GameServerMatchmakingClient {
	return &gameServerMatchmakingClient{cc}
}

func (c *gameServerMatchmakingClient) MatchFound(ctx context.Context, in *MatchFoundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.gameserver.matchmaking.GameServerMatchmaking/MatchFound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerMatchmakingClient) MatchCancelled(ctx context.Context, in *MatchCancelledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/towerdefence.cc.service.gameserver.matchmaking.GameServerMatchmaking/MatchCancelled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerMatchmakingServer is the server API for GameServerMatchmaking service.
// All implementations must embed UnimplementedGameServerMatchmakingServer
// for forward compatibility
type GameServerMatchmakingServer interface {
	MatchFound(context.Context, *MatchFoundRequest) (*emptypb.Empty, error)
	MatchCancelled(context.Context, *MatchCancelledRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameServerMatchmakingServer()
}

// UnimplementedGameServerMatchmakingServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerMatchmakingServer struct {
}

func (UnimplementedGameServerMatchmakingServer) MatchFound(context.Context, *MatchFoundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchFound not implemented")
}
func (UnimplementedGameServerMatchmakingServer) MatchCancelled(context.Context, *MatchCancelledRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchCancelled not implemented")
}
func (UnimplementedGameServerMatchmakingServer) mustEmbedUnimplementedGameServerMatchmakingServer() {}

// UnsafeGameServerMatchmakingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerMatchmakingServer will
// result in compilation errors.
type UnsafeGameServerMatchmakingServer interface {
	mustEmbedUnimplementedGameServerMatchmakingServer()
}

func RegisterGameServerMatchmakingServer(s grpc.ServiceRegistrar, srv GameServerMatchmakingServer) {
	s.RegisterService(&GameServerMatchmaking_ServiceDesc, srv)
}

func _GameServerMatchmaking_MatchFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerMatchmakingServer).MatchFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.gameserver.matchmaking.GameServerMatchmaking/MatchFound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerMatchmakingServer).MatchFound(ctx, req.(*MatchFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerMatchmaking_MatchCancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCancelledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerMatchmakingServer).MatchCancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/towerdefence.cc.service.gameserver.matchmaking.GameServerMatchmaking/MatchCancelled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerMatchmakingServer).MatchCancelled(ctx, req.(*MatchCancelledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerMatchmaking_ServiceDesc is the grpc.ServiceDesc for GameServerMatchmaking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerMatchmaking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "towerdefence.cc.service.gameserver.matchmaking.GameServerMatchmaking",
	HandlerType: (*GameServerMatchmakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchFound",
			Handler:    _GameServerMatchmaking_MatchFound_Handler,
		},
		{
			MethodName: "MatchCancelled",
			Handler:    _GameServerMatchmaking_MatchCancelled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gameserver/gameserver_matchmaking.proto",
}
