// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0
// source: server_store/grpc.proto

package serverstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStoreClient is the client API for ServerStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStoreClient interface {
	AllocateServer(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*ServerAllocation, error)
}

type serverStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStoreClient(cc grpc.ClientConnInterface) ServerStoreClient {
	return &serverStoreClient{cc}
}

func (c *serverStoreClient) AllocateServer(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*ServerAllocation, error) {
	out := new(ServerAllocation)
	err := c.cc.Invoke(ctx, "/emortal.grpc.server_store.ServerStore/AllocateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerStoreServer is the server API for ServerStore service.
// All implementations must embed UnimplementedServerStoreServer
// for forward compatibility
type ServerStoreServer interface {
	AllocateServer(context.Context, *AllocationRequest) (*ServerAllocation, error)
	mustEmbedUnimplementedServerStoreServer()
}

// UnimplementedServerStoreServer must be embedded to have forward compatible implementations.
type UnimplementedServerStoreServer struct {
}

func (UnimplementedServerStoreServer) AllocateServer(context.Context, *AllocationRequest) (*ServerAllocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateServer not implemented")
}
func (UnimplementedServerStoreServer) mustEmbedUnimplementedServerStoreServer() {}

// UnsafeServerStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStoreServer will
// result in compilation errors.
type UnsafeServerStoreServer interface {
	mustEmbedUnimplementedServerStoreServer()
}

func RegisterServerStoreServer(s grpc.ServiceRegistrar, srv ServerStoreServer) {
	s.RegisterService(&ServerStore_ServiceDesc, srv)
}

func _ServerStore_AllocateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerStoreServer).AllocateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.server_store.ServerStore/AllocateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerStoreServer).AllocateServer(ctx, req.(*AllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerStore_ServiceDesc is the grpc.ServiceDesc for ServerStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.grpc.server_store.ServerStore",
	HandlerType: (*ServerStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateServer",
			Handler:    _ServerStore_AllocateServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_store/grpc.proto",
}
