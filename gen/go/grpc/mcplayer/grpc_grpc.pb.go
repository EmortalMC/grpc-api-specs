// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: mc_player/grpc.proto

package mcplayer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// McPlayerClient is the client API for McPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McPlayerClient interface {
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
	GetPlayers(ctx context.Context, in *GetPlayersRequest, opts ...grpc.CallOption) (*GetPlayersResponse, error)
	GetPlayerByUsername(ctx context.Context, in *PlayerUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error)
	SearchPlayersByUsername(ctx context.Context, in *SearchPlayersByUsernameRequest, opts ...grpc.CallOption) (*SearchPlayersByUsernameResponse, error)
	GetLoginSessions(ctx context.Context, in *GetLoginSessionsRequest, opts ...grpc.CallOption) (*LoginSessionsResponse, error)
}

type mcPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcPlayerClient(cc grpc.ClientConnInterface) McPlayerClient {
	return &mcPlayerClient{cc}
}

func (c *mcPlayerClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.McPlayer/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcPlayerClient) GetPlayers(ctx context.Context, in *GetPlayersRequest, opts ...grpc.CallOption) (*GetPlayersResponse, error) {
	out := new(GetPlayersResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.McPlayer/GetPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcPlayerClient) GetPlayerByUsername(ctx context.Context, in *PlayerUsernameRequest, opts ...grpc.CallOption) (*GetPlayerByUsernameResponse, error) {
	out := new(GetPlayerByUsernameResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.McPlayer/GetPlayerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcPlayerClient) SearchPlayersByUsername(ctx context.Context, in *SearchPlayersByUsernameRequest, opts ...grpc.CallOption) (*SearchPlayersByUsernameResponse, error) {
	out := new(SearchPlayersByUsernameResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.McPlayer/SearchPlayersByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcPlayerClient) GetLoginSessions(ctx context.Context, in *GetLoginSessionsRequest, opts ...grpc.CallOption) (*LoginSessionsResponse, error) {
	out := new(LoginSessionsResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.McPlayer/GetLoginSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McPlayerServer is the server API for McPlayer service.
// All implementations must embed UnimplementedMcPlayerServer
// for forward compatibility
type McPlayerServer interface {
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
	GetPlayers(context.Context, *GetPlayersRequest) (*GetPlayersResponse, error)
	GetPlayerByUsername(context.Context, *PlayerUsernameRequest) (*GetPlayerByUsernameResponse, error)
	SearchPlayersByUsername(context.Context, *SearchPlayersByUsernameRequest) (*SearchPlayersByUsernameResponse, error)
	GetLoginSessions(context.Context, *GetLoginSessionsRequest) (*LoginSessionsResponse, error)
	mustEmbedUnimplementedMcPlayerServer()
}

// UnimplementedMcPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedMcPlayerServer struct {
}

func (UnimplementedMcPlayerServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedMcPlayerServer) GetPlayers(context.Context, *GetPlayersRequest) (*GetPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedMcPlayerServer) GetPlayerByUsername(context.Context, *PlayerUsernameRequest) (*GetPlayerByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByUsername not implemented")
}
func (UnimplementedMcPlayerServer) SearchPlayersByUsername(context.Context, *SearchPlayersByUsernameRequest) (*SearchPlayersByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlayersByUsername not implemented")
}
func (UnimplementedMcPlayerServer) GetLoginSessions(context.Context, *GetLoginSessionsRequest) (*LoginSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginSessions not implemented")
}
func (UnimplementedMcPlayerServer) mustEmbedUnimplementedMcPlayerServer() {}

// UnsafeMcPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McPlayerServer will
// result in compilation errors.
type UnsafeMcPlayerServer interface {
	mustEmbedUnimplementedMcPlayerServer()
}

func RegisterMcPlayerServer(s grpc.ServiceRegistrar, srv McPlayerServer) {
	s.RegisterService(&McPlayer_ServiceDesc, srv)
}

func _McPlayer_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.McPlayer/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McPlayer_GetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerServer).GetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.McPlayer/GetPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerServer).GetPlayers(ctx, req.(*GetPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McPlayer_GetPlayerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerServer).GetPlayerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.McPlayer/GetPlayerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerServer).GetPlayerByUsername(ctx, req.(*PlayerUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McPlayer_SearchPlayersByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlayersByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerServer).SearchPlayersByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.McPlayer/SearchPlayersByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerServer).SearchPlayersByUsername(ctx, req.(*SearchPlayersByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McPlayer_GetLoginSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerServer).GetLoginSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.McPlayer/GetLoginSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerServer).GetLoginSessions(ctx, req.(*GetLoginSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McPlayer_ServiceDesc is the grpc.ServiceDesc for McPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.grpc.McPlayer",
	HandlerType: (*McPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayer",
			Handler:    _McPlayer_GetPlayer_Handler,
		},
		{
			MethodName: "GetPlayers",
			Handler:    _McPlayer_GetPlayers_Handler,
		},
		{
			MethodName: "GetPlayerByUsername",
			Handler:    _McPlayer_GetPlayerByUsername_Handler,
		},
		{
			MethodName: "SearchPlayersByUsername",
			Handler:    _McPlayer_SearchPlayersByUsername_Handler,
		},
		{
			MethodName: "GetLoginSessions",
			Handler:    _McPlayer_GetLoginSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mc_player/grpc.proto",
}
