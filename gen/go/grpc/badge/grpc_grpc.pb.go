// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: badges/grpc.proto

package badge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BadgeManagerClient is the client API for BadgeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BadgeManagerClient interface {
	GetPlayerBadges(ctx context.Context, in *GetPlayerBadgesRequest, opts ...grpc.CallOption) (*GetPlayerBadgesResponse, error)
}

type badgeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBadgeManagerClient(cc grpc.ClientConnInterface) BadgeManagerClient {
	return &badgeManagerClient{cc}
}

func (c *badgeManagerClient) GetPlayerBadges(ctx context.Context, in *GetPlayerBadgesRequest, opts ...grpc.CallOption) (*GetPlayerBadgesResponse, error) {
	out := new(GetPlayerBadgesResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.badge.BadgeManager/GetPlayerBadges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgeManagerServer is the server API for BadgeManager service.
// All implementations must embed UnimplementedBadgeManagerServer
// for forward compatibility
type BadgeManagerServer interface {
	GetPlayerBadges(context.Context, *GetPlayerBadgesRequest) (*GetPlayerBadgesResponse, error)
	mustEmbedUnimplementedBadgeManagerServer()
}

// UnimplementedBadgeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBadgeManagerServer struct {
}

func (UnimplementedBadgeManagerServer) GetPlayerBadges(context.Context, *GetPlayerBadgesRequest) (*GetPlayerBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerBadges not implemented")
}
func (UnimplementedBadgeManagerServer) mustEmbedUnimplementedBadgeManagerServer() {}

// UnsafeBadgeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BadgeManagerServer will
// result in compilation errors.
type UnsafeBadgeManagerServer interface {
	mustEmbedUnimplementedBadgeManagerServer()
}

func RegisterBadgeManagerServer(s grpc.ServiceRegistrar, srv BadgeManagerServer) {
	s.RegisterService(&BadgeManager_ServiceDesc, srv)
}

func _BadgeManager_GetPlayerBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeManagerServer).GetPlayerBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.badge.BadgeManager/GetPlayerBadges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeManagerServer).GetPlayerBadges(ctx, req.(*GetPlayerBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BadgeManager_ServiceDesc is the grpc.ServiceDesc for BadgeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BadgeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.grpc.badge.BadgeManager",
	HandlerType: (*BadgeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerBadges",
			Handler:    _BadgeManager_GetPlayerBadges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badges/grpc.proto",
}
