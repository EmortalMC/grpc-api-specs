// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: badges/grpc.proto

package badge

import (
	badge "github.com/emortalmc/proto-specs/gen/go/model/badge"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetActivePlayerBadgeErrorResponse_Reason int32

const (
	SetActivePlayerBadgeErrorResponse_PLAYER_DOESNT_HAVE_BADGE SetActivePlayerBadgeErrorResponse_Reason = 0
)

// Enum value maps for SetActivePlayerBadgeErrorResponse_Reason.
var (
	SetActivePlayerBadgeErrorResponse_Reason_name = map[int32]string{
		0: "PLAYER_DOESNT_HAVE_BADGE",
	}
	SetActivePlayerBadgeErrorResponse_Reason_value = map[string]int32{
		"PLAYER_DOESNT_HAVE_BADGE": 0,
	}
)

func (x SetActivePlayerBadgeErrorResponse_Reason) Enum() *SetActivePlayerBadgeErrorResponse_Reason {
	p := new(SetActivePlayerBadgeErrorResponse_Reason)
	*p = x
	return p
}

func (x SetActivePlayerBadgeErrorResponse_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetActivePlayerBadgeErrorResponse_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_badges_grpc_proto_enumTypes[0].Descriptor()
}

func (SetActivePlayerBadgeErrorResponse_Reason) Type() protoreflect.EnumType {
	return &file_badges_grpc_proto_enumTypes[0]
}

func (x SetActivePlayerBadgeErrorResponse_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetActivePlayerBadgeErrorResponse_Reason.Descriptor instead.
func (SetActivePlayerBadgeErrorResponse_Reason) EnumDescriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{4, 0}
}

type AddBadgeToPlayerErrorResponse_Reason int32

const (
	AddBadgeToPlayerErrorResponse_PLAYER_ALREADY_HAS_BADGE AddBadgeToPlayerErrorResponse_Reason = 0
)

// Enum value maps for AddBadgeToPlayerErrorResponse_Reason.
var (
	AddBadgeToPlayerErrorResponse_Reason_name = map[int32]string{
		0: "PLAYER_ALREADY_HAS_BADGE",
	}
	AddBadgeToPlayerErrorResponse_Reason_value = map[string]int32{
		"PLAYER_ALREADY_HAS_BADGE": 0,
	}
)

func (x AddBadgeToPlayerErrorResponse_Reason) Enum() *AddBadgeToPlayerErrorResponse_Reason {
	p := new(AddBadgeToPlayerErrorResponse_Reason)
	*p = x
	return p
}

func (x AddBadgeToPlayerErrorResponse_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddBadgeToPlayerErrorResponse_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_badges_grpc_proto_enumTypes[1].Descriptor()
}

func (AddBadgeToPlayerErrorResponse_Reason) Type() protoreflect.EnumType {
	return &file_badges_grpc_proto_enumTypes[1]
}

func (x AddBadgeToPlayerErrorResponse_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddBadgeToPlayerErrorResponse_Reason.Descriptor instead.
func (AddBadgeToPlayerErrorResponse_Reason) EnumDescriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{9, 0}
}

type RemoveBadgeFromPlayerErrorResponse_Reason int32

const (
	RemoveBadgeFromPlayerErrorResponse_PLAYER_DOESNT_HAVE_BADGE RemoveBadgeFromPlayerErrorResponse_Reason = 0
)

// Enum value maps for RemoveBadgeFromPlayerErrorResponse_Reason.
var (
	RemoveBadgeFromPlayerErrorResponse_Reason_name = map[int32]string{
		0: "PLAYER_DOESNT_HAVE_BADGE",
	}
	RemoveBadgeFromPlayerErrorResponse_Reason_value = map[string]int32{
		"PLAYER_DOESNT_HAVE_BADGE": 0,
	}
)

func (x RemoveBadgeFromPlayerErrorResponse_Reason) Enum() *RemoveBadgeFromPlayerErrorResponse_Reason {
	p := new(RemoveBadgeFromPlayerErrorResponse_Reason)
	*p = x
	return p
}

func (x RemoveBadgeFromPlayerErrorResponse_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveBadgeFromPlayerErrorResponse_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_badges_grpc_proto_enumTypes[2].Descriptor()
}

func (RemoveBadgeFromPlayerErrorResponse_Reason) Type() protoreflect.EnumType {
	return &file_badges_grpc_proto_enumTypes[2]
}

func (x RemoveBadgeFromPlayerErrorResponse_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveBadgeFromPlayerErrorResponse_Reason.Descriptor instead.
func (RemoveBadgeFromPlayerErrorResponse_Reason) EnumDescriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{12, 0}
}

type GetPlayerBadgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// player_id of type UUID
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *GetPlayerBadgesRequest) Reset() {
	*x = GetPlayerBadgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerBadgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerBadgesRequest) ProtoMessage() {}

func (x *GetPlayerBadgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerBadgesRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerBadgesRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlayerBadgesRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetPlayerBadgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Badges []*badge.Badge `protobuf:"bytes,1,rep,name=badges,proto3" json:"badges,omitempty"`
	// active_badge_id only exists if the player has an active badge
	ActiveBadgeId *string `protobuf:"bytes,2,opt,name=active_badge_id,json=activeBadgeId,proto3,oneof" json:"active_badge_id,omitempty"`
}

func (x *GetPlayerBadgesResponse) Reset() {
	*x = GetPlayerBadgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerBadgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerBadgesResponse) ProtoMessage() {}

func (x *GetPlayerBadgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerBadgesResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerBadgesResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlayerBadgesResponse) GetBadges() []*badge.Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *GetPlayerBadgesResponse) GetActiveBadgeId() string {
	if x != nil && x.ActiveBadgeId != nil {
		return *x.ActiveBadgeId
	}
	return ""
}

type SetActivePlayerBadgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// player_id of type UUID
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	BadgeId  string `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
}

func (x *SetActivePlayerBadgeRequest) Reset() {
	*x = SetActivePlayerBadgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePlayerBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePlayerBadgeRequest) ProtoMessage() {}

func (x *SetActivePlayerBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePlayerBadgeRequest.ProtoReflect.Descriptor instead.
func (*SetActivePlayerBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *SetActivePlayerBadgeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SetActivePlayerBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type SetActivePlayerBadgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActivePlayerBadgeResponse) Reset() {
	*x = SetActivePlayerBadgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePlayerBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePlayerBadgeResponse) ProtoMessage() {}

func (x *SetActivePlayerBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePlayerBadgeResponse.ProtoReflect.Descriptor instead.
func (*SetActivePlayerBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{3}
}

type SetActivePlayerBadgeErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason SetActivePlayerBadgeErrorResponse_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=emortal.grpc.badge.SetActivePlayerBadgeErrorResponse_Reason" json:"reason,omitempty"`
}

func (x *SetActivePlayerBadgeErrorResponse) Reset() {
	*x = SetActivePlayerBadgeErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePlayerBadgeErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePlayerBadgeErrorResponse) ProtoMessage() {}

func (x *SetActivePlayerBadgeErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePlayerBadgeErrorResponse.ProtoReflect.Descriptor instead.
func (*SetActivePlayerBadgeErrorResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *SetActivePlayerBadgeErrorResponse) GetReason() SetActivePlayerBadgeErrorResponse_Reason {
	if x != nil {
		return x.Reason
	}
	return SetActivePlayerBadgeErrorResponse_PLAYER_DOESNT_HAVE_BADGE
}

type GetActivePlayerBadgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// player_id of type UUID
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *GetActivePlayerBadgeRequest) Reset() {
	*x = GetActivePlayerBadgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivePlayerBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivePlayerBadgeRequest) ProtoMessage() {}

func (x *GetActivePlayerBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivePlayerBadgeRequest.ProtoReflect.Descriptor instead.
func (*GetActivePlayerBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetActivePlayerBadgeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetActivePlayerBadgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Badge *badge.Badge `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *GetActivePlayerBadgeResponse) Reset() {
	*x = GetActivePlayerBadgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivePlayerBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivePlayerBadgeResponse) ProtoMessage() {}

func (x *GetActivePlayerBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivePlayerBadgeResponse.ProtoReflect.Descriptor instead.
func (*GetActivePlayerBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetActivePlayerBadgeResponse) GetBadge() *badge.Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type AddBadgeToPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// player_id of type UUID
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	BadgeId  string `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
}

func (x *AddBadgeToPlayerRequest) Reset() {
	*x = AddBadgeToPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBadgeToPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBadgeToPlayerRequest) ProtoMessage() {}

func (x *AddBadgeToPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBadgeToPlayerRequest.ProtoReflect.Descriptor instead.
func (*AddBadgeToPlayerRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *AddBadgeToPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *AddBadgeToPlayerRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type AddBadgeToPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBadgeToPlayerResponse) Reset() {
	*x = AddBadgeToPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBadgeToPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBadgeToPlayerResponse) ProtoMessage() {}

func (x *AddBadgeToPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBadgeToPlayerResponse.ProtoReflect.Descriptor instead.
func (*AddBadgeToPlayerResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{8}
}

type AddBadgeToPlayerErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason AddBadgeToPlayerErrorResponse_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=emortal.grpc.badge.AddBadgeToPlayerErrorResponse_Reason" json:"reason,omitempty"`
}

func (x *AddBadgeToPlayerErrorResponse) Reset() {
	*x = AddBadgeToPlayerErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBadgeToPlayerErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBadgeToPlayerErrorResponse) ProtoMessage() {}

func (x *AddBadgeToPlayerErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBadgeToPlayerErrorResponse.ProtoReflect.Descriptor instead.
func (*AddBadgeToPlayerErrorResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *AddBadgeToPlayerErrorResponse) GetReason() AddBadgeToPlayerErrorResponse_Reason {
	if x != nil {
		return x.Reason
	}
	return AddBadgeToPlayerErrorResponse_PLAYER_ALREADY_HAS_BADGE
}

type RemoveBadgeFromPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// player_id of type UUID
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	BadgeId  string `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
}

func (x *RemoveBadgeFromPlayerRequest) Reset() {
	*x = RemoveBadgeFromPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBadgeFromPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBadgeFromPlayerRequest) ProtoMessage() {}

func (x *RemoveBadgeFromPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBadgeFromPlayerRequest.ProtoReflect.Descriptor instead.
func (*RemoveBadgeFromPlayerRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveBadgeFromPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RemoveBadgeFromPlayerRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type RemoveBadgeFromPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBadgeFromPlayerResponse) Reset() {
	*x = RemoveBadgeFromPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBadgeFromPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBadgeFromPlayerResponse) ProtoMessage() {}

func (x *RemoveBadgeFromPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBadgeFromPlayerResponse.ProtoReflect.Descriptor instead.
func (*RemoveBadgeFromPlayerResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{11}
}

type RemoveBadgeFromPlayerErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason RemoveBadgeFromPlayerErrorResponse_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=emortal.grpc.badge.RemoveBadgeFromPlayerErrorResponse_Reason" json:"reason,omitempty"`
}

func (x *RemoveBadgeFromPlayerErrorResponse) Reset() {
	*x = RemoveBadgeFromPlayerErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBadgeFromPlayerErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBadgeFromPlayerErrorResponse) ProtoMessage() {}

func (x *RemoveBadgeFromPlayerErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBadgeFromPlayerErrorResponse.ProtoReflect.Descriptor instead.
func (*RemoveBadgeFromPlayerErrorResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveBadgeFromPlayerErrorResponse) GetReason() RemoveBadgeFromPlayerErrorResponse_Reason {
	if x != nil {
		return x.Reason
	}
	return RemoveBadgeFromPlayerErrorResponse_PLAYER_DOESNT_HAVE_BADGE
}

type GetBadgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBadgesRequest) Reset() {
	*x = GetBadgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBadgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBadgesRequest) ProtoMessage() {}

func (x *GetBadgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBadgesRequest.ProtoReflect.Descriptor instead.
func (*GetBadgesRequest) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{13}
}

type GetBadgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Badges []*badge.Badge `protobuf:"bytes,1,rep,name=badges,proto3" json:"badges,omitempty"`
}

func (x *GetBadgesResponse) Reset() {
	*x = GetBadgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_badges_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBadgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBadgesResponse) ProtoMessage() {}

func (x *GetBadgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badges_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBadgesResponse.ProtoReflect.Descriptor instead.
func (*GetBadgesResponse) Descriptor() ([]byte, []int) {
	return file_badges_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetBadgesResponse) GetBadges() []*badge.Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

var File_badges_grpc_proto protoreflect.FileDescriptor

var file_badges_grpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x1a, 0x13, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x4e, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x47, 0x45, 0x10, 0x00, 0x22,
	0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6d, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x22, 0x51, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x1d, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x42, 0x41, 0x44, 0x47, 0x45, 0x10, 0x00, 0x22, 0x56, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x26, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f,
	0x42, 0x41, 0x44, 0x47, 0x45, 0x10, 0x00, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x32, 0xc3, 0x05, 0x0a, 0x0c, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65,
	0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x6d, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6d,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x63, 0x0a, 0x1a, 0x64, 0x65,
	0x76, 0x2e, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x11, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6d,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_badges_grpc_proto_rawDescOnce sync.Once
	file_badges_grpc_proto_rawDescData = file_badges_grpc_proto_rawDesc
)

func file_badges_grpc_proto_rawDescGZIP() []byte {
	file_badges_grpc_proto_rawDescOnce.Do(func() {
		file_badges_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_badges_grpc_proto_rawDescData)
	})
	return file_badges_grpc_proto_rawDescData
}

var file_badges_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_badges_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_badges_grpc_proto_goTypes = []interface{}{
	(SetActivePlayerBadgeErrorResponse_Reason)(0),  // 0: emortal.grpc.badge.SetActivePlayerBadgeErrorResponse.Reason
	(AddBadgeToPlayerErrorResponse_Reason)(0),      // 1: emortal.grpc.badge.AddBadgeToPlayerErrorResponse.Reason
	(RemoveBadgeFromPlayerErrorResponse_Reason)(0), // 2: emortal.grpc.badge.RemoveBadgeFromPlayerErrorResponse.Reason
	(*GetPlayerBadgesRequest)(nil),                 // 3: emortal.grpc.badge.GetPlayerBadgesRequest
	(*GetPlayerBadgesResponse)(nil),                // 4: emortal.grpc.badge.GetPlayerBadgesResponse
	(*SetActivePlayerBadgeRequest)(nil),            // 5: emortal.grpc.badge.SetActivePlayerBadgeRequest
	(*SetActivePlayerBadgeResponse)(nil),           // 6: emortal.grpc.badge.SetActivePlayerBadgeResponse
	(*SetActivePlayerBadgeErrorResponse)(nil),      // 7: emortal.grpc.badge.SetActivePlayerBadgeErrorResponse
	(*GetActivePlayerBadgeRequest)(nil),            // 8: emortal.grpc.badge.GetActivePlayerBadgeRequest
	(*GetActivePlayerBadgeResponse)(nil),           // 9: emortal.grpc.badge.GetActivePlayerBadgeResponse
	(*AddBadgeToPlayerRequest)(nil),                // 10: emortal.grpc.badge.AddBadgeToPlayerRequest
	(*AddBadgeToPlayerResponse)(nil),               // 11: emortal.grpc.badge.AddBadgeToPlayerResponse
	(*AddBadgeToPlayerErrorResponse)(nil),          // 12: emortal.grpc.badge.AddBadgeToPlayerErrorResponse
	(*RemoveBadgeFromPlayerRequest)(nil),           // 13: emortal.grpc.badge.RemoveBadgeFromPlayerRequest
	(*RemoveBadgeFromPlayerResponse)(nil),          // 14: emortal.grpc.badge.RemoveBadgeFromPlayerResponse
	(*RemoveBadgeFromPlayerErrorResponse)(nil),     // 15: emortal.grpc.badge.RemoveBadgeFromPlayerErrorResponse
	(*GetBadgesRequest)(nil),                       // 16: emortal.grpc.badge.GetBadgesRequest
	(*GetBadgesResponse)(nil),                      // 17: emortal.grpc.badge.GetBadgesResponse
	(*badge.Badge)(nil),                            // 18: emortal.model.badge.Badge
}
var file_badges_grpc_proto_depIdxs = []int32{
	18, // 0: emortal.grpc.badge.GetPlayerBadgesResponse.badges:type_name -> emortal.model.badge.Badge
	0,  // 1: emortal.grpc.badge.SetActivePlayerBadgeErrorResponse.reason:type_name -> emortal.grpc.badge.SetActivePlayerBadgeErrorResponse.Reason
	18, // 2: emortal.grpc.badge.GetActivePlayerBadgeResponse.badge:type_name -> emortal.model.badge.Badge
	1,  // 3: emortal.grpc.badge.AddBadgeToPlayerErrorResponse.reason:type_name -> emortal.grpc.badge.AddBadgeToPlayerErrorResponse.Reason
	2,  // 4: emortal.grpc.badge.RemoveBadgeFromPlayerErrorResponse.reason:type_name -> emortal.grpc.badge.RemoveBadgeFromPlayerErrorResponse.Reason
	18, // 5: emortal.grpc.badge.GetBadgesResponse.badges:type_name -> emortal.model.badge.Badge
	3,  // 6: emortal.grpc.badge.BadgeManager.GetPlayerBadges:input_type -> emortal.grpc.badge.GetPlayerBadgesRequest
	8,  // 7: emortal.grpc.badge.BadgeManager.GetActivePlayerBadge:input_type -> emortal.grpc.badge.GetActivePlayerBadgeRequest
	5,  // 8: emortal.grpc.badge.BadgeManager.SetActivePlayerBadge:input_type -> emortal.grpc.badge.SetActivePlayerBadgeRequest
	10, // 9: emortal.grpc.badge.BadgeManager.AddBadgeToPlayer:input_type -> emortal.grpc.badge.AddBadgeToPlayerRequest
	13, // 10: emortal.grpc.badge.BadgeManager.RemoveBadgeFromPlayer:input_type -> emortal.grpc.badge.RemoveBadgeFromPlayerRequest
	16, // 11: emortal.grpc.badge.BadgeManager.GetBadges:input_type -> emortal.grpc.badge.GetBadgesRequest
	4,  // 12: emortal.grpc.badge.BadgeManager.GetPlayerBadges:output_type -> emortal.grpc.badge.GetPlayerBadgesResponse
	9,  // 13: emortal.grpc.badge.BadgeManager.GetActivePlayerBadge:output_type -> emortal.grpc.badge.GetActivePlayerBadgeResponse
	6,  // 14: emortal.grpc.badge.BadgeManager.SetActivePlayerBadge:output_type -> emortal.grpc.badge.SetActivePlayerBadgeResponse
	11, // 15: emortal.grpc.badge.BadgeManager.AddBadgeToPlayer:output_type -> emortal.grpc.badge.AddBadgeToPlayerResponse
	14, // 16: emortal.grpc.badge.BadgeManager.RemoveBadgeFromPlayer:output_type -> emortal.grpc.badge.RemoveBadgeFromPlayerResponse
	17, // 17: emortal.grpc.badge.BadgeManager.GetBadges:output_type -> emortal.grpc.badge.GetBadgesResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_badges_grpc_proto_init() }
func file_badges_grpc_proto_init() {
	if File_badges_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_badges_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerBadgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerBadgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivePlayerBadgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivePlayerBadgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivePlayerBadgeErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivePlayerBadgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivePlayerBadgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBadgeToPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBadgeToPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBadgeToPlayerErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBadgeFromPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBadgeFromPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBadgeFromPlayerErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBadgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_badges_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBadgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_badges_grpc_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_badges_grpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_badges_grpc_proto_goTypes,
		DependencyIndexes: file_badges_grpc_proto_depIdxs,
		EnumInfos:         file_badges_grpc_proto_enumTypes,
		MessageInfos:      file_badges_grpc_proto_msgTypes,
	}.Build()
	File_badges_grpc_proto = out.File
	file_badges_grpc_proto_rawDesc = nil
	file_badges_grpc_proto_goTypes = nil
	file_badges_grpc_proto_depIdxs = nil
}
