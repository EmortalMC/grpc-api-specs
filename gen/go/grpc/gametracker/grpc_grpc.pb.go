// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: game_tracker/grpc.proto

package gametracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameTrackerClient is the client API for GameTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameTrackerClient interface {
	GetPlayerActiveGame(ctx context.Context, in *GetPlayerActiveGameRequest, opts ...grpc.CallOption) (*GetPlayerActiveGameResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
}

type gameTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameTrackerClient(cc grpc.ClientConnInterface) GameTrackerClient {
	return &gameTrackerClient{cc}
}

func (c *gameTrackerClient) GetPlayerActiveGame(ctx context.Context, in *GetPlayerActiveGameRequest, opts ...grpc.CallOption) (*GetPlayerActiveGameResponse, error) {
	out := new(GetPlayerActiveGameResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.game_tracker.GameTracker/GetPlayerActiveGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameTrackerClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.game_tracker.GameTracker/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameTrackerServer is the server API for GameTracker service.
// All implementations must embed UnimplementedGameTrackerServer
// for forward compatibility
type GameTrackerServer interface {
	GetPlayerActiveGame(context.Context, *GetPlayerActiveGameRequest) (*GetPlayerActiveGameResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	mustEmbedUnimplementedGameTrackerServer()
}

// UnimplementedGameTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedGameTrackerServer struct {
}

func (UnimplementedGameTrackerServer) GetPlayerActiveGame(context.Context, *GetPlayerActiveGameRequest) (*GetPlayerActiveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerActiveGame not implemented")
}
func (UnimplementedGameTrackerServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedGameTrackerServer) mustEmbedUnimplementedGameTrackerServer() {}

// UnsafeGameTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameTrackerServer will
// result in compilation errors.
type UnsafeGameTrackerServer interface {
	mustEmbedUnimplementedGameTrackerServer()
}

func RegisterGameTrackerServer(s grpc.ServiceRegistrar, srv GameTrackerServer) {
	s.RegisterService(&GameTracker_ServiceDesc, srv)
}

func _GameTracker_GetPlayerActiveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerActiveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameTrackerServer).GetPlayerActiveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.game_tracker.GameTracker/GetPlayerActiveGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameTrackerServer).GetPlayerActiveGame(ctx, req.(*GetPlayerActiveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameTracker_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameTrackerServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.game_tracker.GameTracker/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameTrackerServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameTracker_ServiceDesc is the grpc.ServiceDesc for GameTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.grpc.game_tracker.GameTracker",
	HandlerType: (*GameTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerActiveGame",
			Handler:    _GameTracker_GetPlayerActiveGame_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _GameTracker_ListGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_tracker/grpc.proto",
}
