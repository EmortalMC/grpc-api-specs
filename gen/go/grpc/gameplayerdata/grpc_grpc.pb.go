// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: game_player_data/grpc.proto

package gameplayerdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamePlayerDataServiceClient is the client API for GamePlayerDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamePlayerDataServiceClient interface {
	GetGamePlayerData(ctx context.Context, in *GamePlayerDataRequest, opts ...grpc.CallOption) (*GetGamePlayerDataResponse, error)
}

type gamePlayerDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamePlayerDataServiceClient(cc grpc.ClientConnInterface) GamePlayerDataServiceClient {
	return &gamePlayerDataServiceClient{cc}
}

func (c *gamePlayerDataServiceClient) GetGamePlayerData(ctx context.Context, in *GamePlayerDataRequest, opts ...grpc.CallOption) (*GetGamePlayerDataResponse, error) {
	out := new(GetGamePlayerDataResponse)
	err := c.cc.Invoke(ctx, "/emortal.grpc.gameplayerdata.GamePlayerDataService/GetGamePlayerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamePlayerDataServiceServer is the server API for GamePlayerDataService service.
// All implementations must embed UnimplementedGamePlayerDataServiceServer
// for forward compatibility
type GamePlayerDataServiceServer interface {
	GetGamePlayerData(context.Context, *GamePlayerDataRequest) (*GetGamePlayerDataResponse, error)
	mustEmbedUnimplementedGamePlayerDataServiceServer()
}

// UnimplementedGamePlayerDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGamePlayerDataServiceServer struct {
}

func (UnimplementedGamePlayerDataServiceServer) GetGamePlayerData(context.Context, *GamePlayerDataRequest) (*GetGamePlayerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamePlayerData not implemented")
}
func (UnimplementedGamePlayerDataServiceServer) mustEmbedUnimplementedGamePlayerDataServiceServer() {}

// UnsafeGamePlayerDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamePlayerDataServiceServer will
// result in compilation errors.
type UnsafeGamePlayerDataServiceServer interface {
	mustEmbedUnimplementedGamePlayerDataServiceServer()
}

func RegisterGamePlayerDataServiceServer(s grpc.ServiceRegistrar, srv GamePlayerDataServiceServer) {
	s.RegisterService(&GamePlayerDataService_ServiceDesc, srv)
}

func _GamePlayerDataService_GetGamePlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamePlayerDataServiceServer).GetGamePlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emortal.grpc.gameplayerdata.GamePlayerDataService/GetGamePlayerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamePlayerDataServiceServer).GetGamePlayerData(ctx, req.(*GamePlayerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GamePlayerDataService_ServiceDesc is the grpc.ServiceDesc for GamePlayerDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamePlayerDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.grpc.gameplayerdata.GamePlayerDataService",
	HandlerType: (*GamePlayerDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGamePlayerData",
			Handler:    _GamePlayerDataService_GetGamePlayerData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_player_data/grpc.proto",
}
