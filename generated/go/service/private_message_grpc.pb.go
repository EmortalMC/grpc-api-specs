// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: service/private_message.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivateMessageClient is the client API for PrivateMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateMessageClient interface {
	SendPrivateMessage(ctx context.Context, in *PrivateMessageRequest, opts ...grpc.CallOption) (*PrivateMessageResponse, error)
}

type privateMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateMessageClient(cc grpc.ClientConnInterface) PrivateMessageClient {
	return &privateMessageClient{cc}
}

func (c *privateMessageClient) SendPrivateMessage(ctx context.Context, in *PrivateMessageRequest, opts ...grpc.CallOption) (*PrivateMessageResponse, error) {
	out := new(PrivateMessageResponse)
	err := c.cc.Invoke(ctx, "/service.private_message.PrivateMessage/SendPrivateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateMessageServer is the server API for PrivateMessage service.
// All implementations must embed UnimplementedPrivateMessageServer
// for forward compatibility
type PrivateMessageServer interface {
	SendPrivateMessage(context.Context, *PrivateMessageRequest) (*PrivateMessageResponse, error)
	mustEmbedUnimplementedPrivateMessageServer()
}

// UnimplementedPrivateMessageServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateMessageServer struct {
}

func (UnimplementedPrivateMessageServer) SendPrivateMessage(context.Context, *PrivateMessageRequest) (*PrivateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServer) mustEmbedUnimplementedPrivateMessageServer() {}

// UnsafePrivateMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateMessageServer will
// result in compilation errors.
type UnsafePrivateMessageServer interface {
	mustEmbedUnimplementedPrivateMessageServer()
}

func RegisterPrivateMessageServer(s grpc.ServiceRegistrar, srv PrivateMessageServer) {
	s.RegisterService(&PrivateMessage_ServiceDesc, srv)
}

func _PrivateMessage_SendPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServer).SendPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.private_message.PrivateMessage/SendPrivateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServer).SendPrivateMessage(ctx, req.(*PrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateMessage_ServiceDesc is the grpc.ServiceDesc for PrivateMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.private_message.PrivateMessage",
	HandlerType: (*PrivateMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPrivateMessage",
			Handler:    _PrivateMessage_SendPrivateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/private_message.proto",
}
