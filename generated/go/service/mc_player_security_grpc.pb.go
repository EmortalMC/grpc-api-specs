// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: service/mc_player_security.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// McPlayerSecurityClient is the client API for McPlayerSecurity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McPlayerSecurityClient interface {
	AddYubiKey(ctx context.Context, in *YubikeyRequest, opts ...grpc.CallOption) (*YubikeyResponse, error)
	VerifyYubikey(ctx context.Context, in *YubikeyRequest, opts ...grpc.CallOption) (*YubikeyResponse, error)
}

type mcPlayerSecurityClient struct {
	cc grpc.ClientConnInterface
}

func NewMcPlayerSecurityClient(cc grpc.ClientConnInterface) McPlayerSecurityClient {
	return &mcPlayerSecurityClient{cc}
}

func (c *mcPlayerSecurityClient) AddYubiKey(ctx context.Context, in *YubikeyRequest, opts ...grpc.CallOption) (*YubikeyResponse, error) {
	out := new(YubikeyResponse)
	err := c.cc.Invoke(ctx, "/service.mc_player_security.McPlayerSecurity/AddYubiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcPlayerSecurityClient) VerifyYubikey(ctx context.Context, in *YubikeyRequest, opts ...grpc.CallOption) (*YubikeyResponse, error) {
	out := new(YubikeyResponse)
	err := c.cc.Invoke(ctx, "/service.mc_player_security.McPlayerSecurity/VerifyYubikey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McPlayerSecurityServer is the server API for McPlayerSecurity service.
// All implementations must embed UnimplementedMcPlayerSecurityServer
// for forward compatibility
type McPlayerSecurityServer interface {
	AddYubiKey(context.Context, *YubikeyRequest) (*YubikeyResponse, error)
	VerifyYubikey(context.Context, *YubikeyRequest) (*YubikeyResponse, error)
	mustEmbedUnimplementedMcPlayerSecurityServer()
}

// UnimplementedMcPlayerSecurityServer must be embedded to have forward compatible implementations.
type UnimplementedMcPlayerSecurityServer struct {
}

func (UnimplementedMcPlayerSecurityServer) AddYubiKey(context.Context, *YubikeyRequest) (*YubikeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddYubiKey not implemented")
}
func (UnimplementedMcPlayerSecurityServer) VerifyYubikey(context.Context, *YubikeyRequest) (*YubikeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyYubikey not implemented")
}
func (UnimplementedMcPlayerSecurityServer) mustEmbedUnimplementedMcPlayerSecurityServer() {}

// UnsafeMcPlayerSecurityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McPlayerSecurityServer will
// result in compilation errors.
type UnsafeMcPlayerSecurityServer interface {
	mustEmbedUnimplementedMcPlayerSecurityServer()
}

func RegisterMcPlayerSecurityServer(s grpc.ServiceRegistrar, srv McPlayerSecurityServer) {
	s.RegisterService(&McPlayerSecurity_ServiceDesc, srv)
}

func _McPlayerSecurity_AddYubiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YubikeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerSecurityServer).AddYubiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.mc_player_security.McPlayerSecurity/AddYubiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerSecurityServer).AddYubiKey(ctx, req.(*YubikeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McPlayerSecurity_VerifyYubikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YubikeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McPlayerSecurityServer).VerifyYubikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.mc_player_security.McPlayerSecurity/VerifyYubikey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McPlayerSecurityServer).VerifyYubikey(ctx, req.(*YubikeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McPlayerSecurity_ServiceDesc is the grpc.ServiceDesc for McPlayerSecurity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McPlayerSecurity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.mc_player_security.McPlayerSecurity",
	HandlerType: (*McPlayerSecurityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddYubiKey",
			Handler:    _McPlayerSecurity_AddYubiKey_Handler,
		},
		{
			MethodName: "VerifyYubikey",
			Handler:    _McPlayerSecurity_VerifyYubikey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/mc_player_security.proto",
}
