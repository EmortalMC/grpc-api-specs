syntax = "proto3";
package emortal.grpc.party;

option java_package = "dev.emortal.api.grpc.party";
option java_outer_classname = "PartyProto";
option go_package = "github.com/emortalmc/proto-specs/gen/go/grpc/party";

import "party/models.proto";
import "common_models.proto";
import "google/protobuf/timestamp.proto";

// NOTES:
// - Creating a party does not exist as a player is always in a party when they join the server.
// - Emptying a party is a bit like disbanding a party, but it does not delete the party.

service PartyService {
  // EmptyParty empties a party, removing all members and invites.
  rpc EmptyParty(EmptyPartyRequest) returns (EmptyPartyResponse) {}

  rpc GetParty(GetPartyRequest) returns (GetPartyResponse) {}

  rpc SetOpenParty(SetOpenPartyRequest) returns (SetOpenPartyResponse) {}

  rpc GetPartyInvites(GetPartyInvitesRequest) returns (GetPartyInvitesResponse) {}
  rpc InvitePlayer(InvitePlayerRequest) returns (InvitePlayerResponse) {}

  rpc JoinParty(JoinPartyRequest) returns (JoinPartyResponse) {}
  rpc LeaveParty(LeavePartyRequest) returns (LeavePartyResponse) {}

  rpc KickPlayer(KickPlayerRequest) returns (KickPlayerResponse) {}
  rpc SetPartyLeader(SetPartyLeaderRequest) returns (SetPartyLeaderResponse) {}
}

service PartySettingsService {
  rpc GetPartySettings(GetPartySettingsRequest) returns (GetPartySettingsResponse) {}
  rpc UpdatePartySettings(UpdatePartySettingsRequest) returns (UpdatePartySettingsResponse) {}
}

service EventService {
  rpc CreateEvent(CreateEventRequest) returns (CreateEventResponse) {}
  rpc UpdateEvent(UpdateEventRequest) returns (UpdateEventResponse) {}
  rpc DeleteEvent(DeleteEventRequest) returns (DeleteEventResponse) {}
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
}

message EmptyPartyRequest {
  oneof id {
    string party_id = 1;
    string player_id = 2;
  }
}

message EmptyPartyResponse {}

message EmptyPartyErrorResponse {
  enum ErrorType {
    NOT_LEADER = 0;
  }
  ErrorType error_type = 1;
}

message GetPartyRequest {
  oneof id {
    string party_id = 1;
    string player_id = 2;
  }
}

message GetPartyResponse {
  model.party.Party party = 1;
}

message SetOpenPartyRequest {
  // player_id of type UUID
  string player_id = 1;

  bool open = 2;
}

message SetOpenPartyResponse {
  model.party.Party party = 1;
}

message SetOpenPartyErrorResponse {
  enum ErrorType {
    NOT_LEADER = 0;
  }
  ErrorType error_type = 1;
}

message GetPartyInvitesRequest {
  oneof id {
    string party_id = 1;
    string player_id = 2;
  }

  model.Pageable pageable = 3;
}

message GetPartyInvitesResponse {
  repeated model.party.PartyInvite invites = 1;
}

message InvitePlayerRequest {
  // issuer_id of type UUID
  string issuer_id = 1;

  string issuer_username = 2;

  // target_id of type UUID
  string target_id = 3;

  string target_username = 4;
}

message InvitePlayerResponse {
  model.party.PartyInvite invite = 1;
}

message InvitePlayerErrorResponse {
  enum ErrorType {
    TARGET_ALREADY_IN_SELF_PARTY = 0;
    TARGET_ALREADY_INVITED = 2;
    // NO_PERMISSION the issuer is not the leader and AllowMemberInvite is false (more settings may be added later)
    NO_PERMISSION = 4;
  }
  ErrorType error_type = 1;
}

message JoinPartyRequest {
  // player_id of type UUID
  string player_id = 1;

  string player_username = 2;

  string target_player_id = 3;
}

message JoinPartyResponse {
  model.party.Party party = 1;
}

message JoinPartyErrorResponse {
  enum ErrorType {
    ALREADY_IN_PARTY = 0;
    NOT_INVITED = 1;
  }
  ErrorType error_type = 1;
}

message LeavePartyRequest {
  // player_id of type UUID
  string player_id = 1;
}

message LeavePartyResponse {}

message LeavePartyErrorResponse {
  enum ErrorType {
    // CANNOT_LEAVE_AS_LEADER you cannot leave if you are the leader of the party.
    // If done by a user, suggest that they empty the party instead or set a new leader.
    CANNOT_LEAVE_AS_LEADER = 0;
  }
  ErrorType error_type = 1;
}

message KickPlayerRequest {
  // issuer_id of type UUID
  string issuer_id = 1;

  string issuer_username = 2;

  // target_id of type UUID
  string target_id = 3;
}

message KickPlayerResponse {}

message KickPlayerErrorResponse {
  enum ErrorType {
    TARGET_NOT_IN_PARTY = 0;
    SELF_NOT_LEADER = 1;
    TARGET_IS_LEADER = 2;
  }
  ErrorType error_type = 1;
}

message SetPartyLeaderRequest {
  // issuer_id of type UUID
  string issuer_id = 1;

  string issuer_username = 2;

  // target_id of type UUID
  string target_id = 3;
}

message SetPartyLeaderResponse {}

message SetPartyLeaderErrorResponse {
  enum ErrorType {
    TARGET_NOT_IN_PARTY = 0;
    SELF_NOT_LEADER = 1;
  }
  ErrorType error_type = 1;
}

// Party Settings Service messages

message GetPartySettingsRequest {
  oneof id {
    string party_id = 1;
    string player_id = 2;
  }
}

message GetPartySettingsResponse {
  model.party.PartySettings settings = 1;
}

message UpdatePartySettingsRequest {
  // issuer_id of type UUID
  string issuer_id = 1;

  optional bool dequeue_on_disconnect = 2;
  optional bool allow_member_dequeue = 3;
  optional bool allow_member_invite = 4;
}

message UpdatePartySettingsResponse {}

// Event Service messages

message CreateEventRequest {
  // owner_id, a string ID that's a name e.g. 'sunday_1_tourney'
  string event_id = 1;
  // owner_id of type UUID
  string owner_id = 2;
  string owner_username = 3;
  model.PlayerSkin owner_skin = 4;

  optional google.protobuf.Timestamp display_time = 5;
  optional google.protobuf.Timestamp start_time = 6;
}

message CreateEventResponse {
  model.party.EventData event = 1;
}

message CreateEventErrorResponse {
  enum ErrorType {
    ALREADY_EXISTS = 0;
  }
  ErrorType error_type = 1;
}

message UpdateEventRequest {
  string event_id = 1;

  optional google.protobuf.Timestamp display_time = 2;
  optional google.protobuf.Timestamp start_time = 3;
}

message UpdateEventResponse {
  model.party.EventData event = 1;
}

// DeleteEventRequest is used to delete an event, or end an ongoing event.
message DeleteEventRequest {
  // event_id if not present, the current event will be used
  optional string event_id = 1;
}

message DeleteEventResponse {}

message DeleteEventErrorResponse {
  enum ErrorType {
    NOT_FOUND = 0;
    // NO_CURRENT_EVENT sent if no event_id is provided and there is no current event.
    NO_CURRENT_EVENT = 1;
  }
  ErrorType error_type = 1;
}

message ListEventsRequest {}

message ListEventsResponse {
  repeated model.party.EventData events = 1;
}

