syntax = "proto3";
package emortal.message.party;

option java_package = "dev.emortal.api.message.party";
option java_multiple_files = true;
option go_package = "github.com/emortalmc/proto-specs/gen/go/message/party";

import "party/models.proto";

message PartyCreatedMessage {
  model.party.Party party = 1;
}

// PartyDeletedMessage is sent when a party is deleted
message PartyDeletedMessage {
  model.party.Party party = 1;
}

// PartyEmptiedMessage is sent when a party is emptied
// Note, this is different to a party being deleted. When it is emptied, the leader remains as a member but all others
// are removed and notified of a disband. The party is also set to closed.
message PartyEmptiedMessage {
  model.party.Party party = 1;
}

message PartyInviteCreatedMessage {
  model.party.PartyInvite invite = 1;
}

message PartyPlayerJoinedMessage {
  // party_id of type mongo ObjectId
  string party_id = 1;
  model.party.PartyMember member = 2;
}

message PartyPlayerLeftMessage {
  // party_id of type mongo ObjectId
  string party_id = 1;
  model.party.PartyMember member = 2;

  // kicked_by only present if the player was kicked, not if they left
  optional model.party.PartyMember kicked_by = 3;
}

message PartyOpenMessage {
  // party_id of type mongo ObjectId
  string party_id = 1;
}

message PartyClosedMessage {
  // party_id of type mongo ObjectId
  string party_id = 1;
}

message PartyLeaderChangedMessage {
  // party_id of type mongo ObjectId
  string party_id = 1;
  model.party.PartyMember new_leader = 2;
}

message PartySettingsChangedMessage {
  // player_id of type UUID
  string player_id = 1;

  model.party.PartySettings settings = 2;
}
