syntax = "proto3";
package emortal.kurushimi.grpc;

option java_package = "dev.emortal.api.grpc.matchmaker";
option java_outer_classname = "MatchmakerProto";
option go_package = "github.com/emortalmc/proto-specs/gen/go/grpc/matchmaker";

import "kurushimi/models.proto";

service Matchmaker {
  rpc QueueByPlayer(QueueByPlayerRequest) returns (QueueByPlayerResponse) {}

  // SendPlayerToLobby is used to send a player to a lobby match after they've already joined the server.
  // This is used alternatively to QueueByPlayer as lobby must be handled differently
  // e.g. you must be able to go to the lobby when in queue for another game mode.
  rpc SendPlayersToLobby(SendPlayerToLobbyRequest) returns (SendPlayerToLobbyResponse) {}

  // QueueInitialLobbyByPlayer is used to queue a player for a proxy/lobby match before they've technically joined the server.
  // This is used by the edge and proxy as the player doesn't yet have a party.
  // Note this method does much less validation and error handling than QueueByPlayer due to its intended use case.
  // This method will create a ticket with auto_teleport as false and default to the 'lobby' game mode.
  rpc LoginQueueByPlayer(LoginQueueByPlayerRequest) returns (LoginQueueByPlayerResponse) {}

  rpc DequeueByPlayer(DequeueByPlayerRequest) returns (DequeueByPlayerResponse) {}
  rpc ChangePlayerMapVote(ChangePlayerMapVoteRequest) returns (ChangePlayerMapVoteResponse) {}
  rpc GetPlayerQueueInfo(GetPlayerQueueInfoRequest) returns (GetPlayerQueueInfoResponse) {}
}

message QueueByPlayerRequest {
  string game_mode_id = 1;

  // player_id of type UUID
  string player_id = 2;

  // private_game defaults to false. If true, gamemode will be created as an instant private game.
  optional bool private_game = 3;

  // voting
  optional string map_id = 4;

  // auto_teleport if true or not specified, the proxy will listen for match messages and teleport the player to the match.
  // if false, the proxy will not auto-teleport the player and you should listen for match messages yourself.
  //
  // e.g. this is used by the proxy for lobby matchmaking as it is handled differently
  // to when the player is already connected to the server.
  optional bool auto_teleport = 5;
}

message QueueByPlayerResponse {}

message QueueByPlayerErrorResponse {
  enum ErrorReason {
    ALREADY_IN_QUEUE = 0;

    INVALID_GAME_MODE = 1;
    GAME_MODE_DISABLED = 2;
    INVALID_MAP = 3;

    PARTY_TOO_LARGE = 4;

    // NO_PERMISSION is normally triggered if the player is not the party leader
    NO_PERMISSION = 6;
  }

  ErrorReason reason = 1;
}

message SendPlayerToLobbyRequest {
  // player_ids of type (repeated) UUID
  repeated string player_ids = 1;

  // send_parties defaults to true. If false, only the players specified will be sent to the lobby.
  // If true, the party of each player will also be sent to the lobby.
  optional bool send_parties = 2;
}

message SendPlayerToLobbyResponse {}

message LoginQueueByPlayerRequest {
  // player_id of type UUID
  string player_id = 1;

  bool is_proxy = 2;
}

message LoginQueueByPlayerResponse {}

message DequeueByPlayerRequest {
  // player_id of type UUID
  string player_id = 1;
}

message DequeueByPlayerResponse {}

message DequeueByPlayerErrorResponse {
  enum ErrorReason {
    NOT_IN_QUEUE = 0;
    NO_PERMISSION = 1;
    ALREADY_MARKED_FOR_DEQUEUE = 2;
  }

  ErrorReason reason = 1;
}

message ChangePlayerMapVoteRequest {
  string player_id = 1;
  string map_id = 2;
}

message ChangePlayerMapVoteResponse {}

message ChangePlayerMapVoteErrorResponse {
  enum ErrorReason {
    INVALID_MAP = 0;
    NOT_IN_QUEUE = 1;
  }

  ErrorReason reason = 1;
}

message GetPlayerQueueInfoRequest {
  string player_id = 1;
}

message GetPlayerQueueInfoResponse {
  model.Ticket ticket = 1;
  model.QueuedPlayer queued_player = 2;

  optional model.PendingMatch pending_match = 3;
}
