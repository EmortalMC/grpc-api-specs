syntax = "proto3";
package towerdefence.cc.service.mc_player;

option java_package = "cc.towerdefence.api.service";
option java_outer_classname = "McPlayerProto";
option go_package = "towerdefence.cc/service/mc_player";


import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "model/player.proto";

service McPlayer {
  rpc GetPlayer(towerdefence.cc.model.PlayerRequest) returns (PlayerResponse) {}
  rpc GetPlayers(towerdefence.cc.model.PlayersRequest) returns (PlayersResponse) {}
  rpc GetPlayerByUsername(towerdefence.cc.model.PlayerUsernameRequest) returns (PlayerResponse) {}
  rpc SearchPlayersByUsername(McPlayerSearchRequest) returns (PlayerSearchResponse) {}
  rpc GetPlayerSessions(McPageablePlayerRequest) returns (PlayerSessionsResponse) {}

  rpc OnPlayerLogin(McPlayerLoginRequest) returns (PlayerLoginResponse) {}
  rpc OnPlayerDisconnect(McPlayerDisconnectRequest) returns (google.protobuf.Empty) {}
}

message McPageablePlayerRequest {
  string player_id = 1;
  uint32 page = 2;
  uint32 size = 3;
}

message PlayerResponse {
  string id = 1;
  string current_username = 2;
  google.protobuf.Timestamp first_login = 3;
  // If they are currently online this will not be up to date
  google.protobuf.Timestamp last_online = 4;

  bool currently_online = 5;
  optional PlayerSession current_session = 6;

  google.protobuf.Duration play_time = 7;

  bool otp_enabled = 8;
}

message PlayersResponse {
  repeated PlayerResponse players = 1;
}

message McPlayerSearchRequest {
  string username = 1;
  uint32 page = 2;
  uint32 page_size = 3;
  FilterMethod filter_method = 4;

  enum FilterMethod {
    NONE = 0;
    ONLINE = 1;
    FRIENDS = 2;
  }
}

message PlayerSearchResponse {
  repeated PlayerResponse players = 1;
  uint32 page = 2;
  uint32 total_elements = 3;
  uint32 total_pages = 4;
}

message PlayerSession {
  string session_id = 1;

  google.protobuf.Timestamp login_time = 2;
  optional google.protobuf.Timestamp logout_time = 3; // will be null if the player is currently online for this session
}

message PlayerSessionsResponse {
  repeated PlayerSession sessions = 1;
  uint32 page = 2;
  uint64 total_elements = 3;
  uint32 total_pages = 4;
}

message McPlayerLoginRequest {
  string player_id = 1;
  string username = 2;
}

message PlayerLoginResponse {
  string session_id = 1;
}

message McPlayerDisconnectRequest {
  string player_id = 1;
  string session_id = 2;
}