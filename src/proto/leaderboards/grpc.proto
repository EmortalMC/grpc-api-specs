syntax = "proto3";
package emortal.grpc.leaderboard;

option java_package = "dev.emortal.api.grpc.leaderboard";
option java_outer_classname = "LeaderboardProto";
option go_package = "github.com/emortalmc/proto-specs/gen/go/grpc/leaderboard";

import "leaderboards/models.proto";
import "common_models.proto";

service Leaderboard {
  rpc CreateLeaderboard(CreateLeaderboardRequest) returns (CreateLeaderboardResponse);
  // If the leaderboard does not exist, an error with status NOT_FOUND is returned.
  rpc DeleteLeaderboard(DeleteLeaderboardRequest) returns (DeleteLeaderboardResponse);

  // If the leaderboard does not exist, an error with status NOT_FOUND is returned.
  // If the start place is greater than the end place, an error with status INVALID_ARGUMENT is returned.
  // If the end place is greater than the number of entries in the leaderboard, an error with status INVALID_ARGUMENT is returned.
  rpc GetEntries(GetEntriesRequest) returns (GetEntriesResponse);
  // If the leaderboard does not exist, an error with status NOT_FOUND is returned.
  rpc GetEntryCount(GetEntryCountRequest) returns (GetEntryCountResponse);

  rpc CreateEntry(CreateEntryRequest) returns (CreateEntryResponse);
  // If the leaderboard or entry does not exist, an error with status NOT_FOUND is returned.
  rpc DeleteEntry(DeleteEntryRequest) returns (DeleteEntryResponse);

  // If the leaderboard or entry does not exist, an error with status NOT_FOUND is returned.
  rpc UpdateScore(UpdateScoreRequest) returns (UpdateScoreResponse);
}

message CreateLeaderboardRequest {
  string id = 1;
  model.leaderboard.SortOrder sort_order = 2;
}

message CreateLeaderboardResponse {
  model.leaderboard.Leaderboard leaderboard = 1;
}

message DeleteLeaderboardRequest {
  string id = 1;
}

message DeleteLeaderboardResponse {
}

message GetEntriesRequest {
  string leaderboard_id = 1;

  // The start and end rank indicate the range of entries to return, where the rank is the
  // ranking in the leaderboard
  uint32 start_rank = 2;
  uint32 end_rank = 3;
}

message GetEntriesResponse {
  repeated model.leaderboard.LeaderboardEntry entries = 1;
}

message GetEntryCountRequest {
  string leaderboard_id = 1;
}

message GetEntryCountResponse {
  uint32 count = 1;
}

message CreateEntryRequest {
  string leaderboard_id = 1;
  model.leaderboard.LeaderboardEntry entry = 2;
}

message CreateEntryResponse {
}

message DeleteEntryRequest {
  string leaderboard_id = 1;
  string entry_id = 2;
}

message DeleteEntryResponse {
}

message UpdateScoreRequest {
  string leaderboard_id = 1;
  string entry_id = 2;

  double score = 3;
}

message UpdateScoreResponse {
}
