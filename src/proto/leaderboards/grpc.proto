syntax = "proto3";
package emortal.grpc.leaderboard;

option java_package = "dev.emortal.api.grpc.leaderboard";
option java_outer_classname = "LeaderboardProto";
option go_package = "github.com/emortalmc/proto-specs/gen/go/grpc/leaderboard";

import "leaderboards/models.proto";
import "common_models.proto";
import "google/protobuf/any.proto";

service Leaderboard {

  // If the leaderboard does not exist, an error with status NOT_FOUND is returned.
  // If the start place is greater than the end place, an error with status INVALID_ARGUMENT is returned.
  // If the end place is greater than the number of entries in the leaderboard, an error with status INVALID_ARGUMENT is returned.
  rpc GetEntries(GetEntriesRequest) returns (GetEntriesResponse);
}

message GetEntriesRequest {
  string id = 1;
  model.leaderboard.Period period = 2;
  // period_rolling whether the period should be the last x time or roll every x time, e.g. last 24 hours or since the
  // start of the day
  bool period_rolling = 3;

  // limit the maximum number of entries returned, default is 10
  int32 limit = 4;

  // offset the number of entries to skip, default is 0
  int32 offset = 5;

  // uuid_filter filter the leaderboard for players with a specific UUID. Common usage is for friend filtering.
  repeated string uuid_filter = 6;

  // sort_override override the configured direction of the leaderboard within the leaderboard service.
  model.leaderboard.SortOrder sort_override = 7;
}

message GetEntriesResponse {
  repeated model.leaderboard.LeaderboardEntry entries = 1;
  int32 total_entries = 2;
}