syntax = "proto3";
package emortal.model.game_tracker;

option java_package = "dev.emortal.api.model.gametracker";
option java_multiple_files = true;
option go_package = "github.com/emortalmc/proto-specs/gen/go/model/gametracker";

// The models here define additional data objects that can be used by a gamemode.
// Compulsory data is provided in the "messages.proto" of this service.
// The system works based on composition and the server will determine what fields to action on supplied in the Any list.
// Update messages do not have a standard of how often they are sent - it is down to the gamemode to decide.

// models specifically for gRPC usage

message Game {} // todo

// Global common messages

message BasicGamePlayer {
  string id = 1;
  string username = 2;
}

message Team {
  string id = 1;
  string friendly_name = 2;
  // color as hex
  int32 color = 3;

  // player_ids of type UUID
  // these are stored as IDs as the BasicGamePlayer will already be present in the game start data
  repeated string player_ids = 4;
}

//                          //
// Specific common messages
//                         //

// Not for a specific time

message CommonGameTeamData {
  repeated Team teams = 1;
}

// Common - Start

// Common - Update

// Common - Finish

message CommonGameFinishWinnerData {
  // winners of type UUID (as a string)
  repeated string winners = 1;
  // losers may be empty if the game doesn't define losers. Type is UUID (as a string)
  repeated string losers = 2;
}

//                              //
// Specific game mode messages
//                             //

// TODO Game mode: TowerDefence - Finish (add more stuff)

message TowerDefenceHealthData {
  int32 max_health = 1;
  int32 blue_health = 2;
  int32 red_health = 3;
}

message TowerDefenceStartData {
  TowerDefenceHealthData health_data = 1;
}

message TowerDefenceUpdateData {
  TowerDefenceHealthData health_data = 1;
}

message TowerDefenceFinishData {
  TowerDefenceHealthData health_data = 1;
}

// TODO Game mode: Battle - Start, Update, Finish

// TODO Game mode: Parkour Tag - Start, Update, Finish

// TODO Game mode: Block Sumo - Update, Finish

message BlockSumoUpdateData {
  BlockSumoScoreboard scoreboard = 1;
}

message BlockSumoFinishData {
  BlockSumoScoreboard scoreboard = 1;
}

message BlockSumoScoreboard {
  message Entry {
    BasicGamePlayer player = 1;
    int32 remaining_lives = 2;
    int32 kills = 3;
    int32 final_kills = 4;
  }

  repeated Entry entries = 1;
}

// TODO Game mode: Minesweeper - Start

message MinesweeperStartData {
  int64 total_mines = 1;
  // TODO maybe we have a difficulty here?
}

// MinesweeperUpdateData
// * You can calculate game progress by doing ((uncovered_mines) / total_mines) * 100. Note that total_mines is not in this message.
message MinesweeperUpdateData {
  int32 remaining_mines = 1;
  int32 placed_flags = 2;
}

// MinesweeperFinishData
message MinesweeperFinishData {
  // winner_data if the game is won, all players are winners. If the game is lost, all players are losers.
  CommonGameFinishWinnerData winner_data = 1;
}
