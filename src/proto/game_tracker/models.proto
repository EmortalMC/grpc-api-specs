syntax = "proto3";
package emortal.model.game_tracker;

option java_package = "dev.emortal.api.model.gametracker";
option java_multiple_files = true;
option go_package = "github.com/emortalmc/proto-specs/gen/go/model/gametracker";

import "google/protobuf/timestamp.proto";

// The models here define additional data objects that can be used by a gamemode.
// Compulsory data is provided in the "messages.proto" of this service.
// The system works based on composition and the server will determine what fields to action on supplied in the Any list.
// Update messages do not have a standard of how often they are sent - it is down to the gamemode to decide.

// models specifically for gRPC usage

message Game {} // todo

// Global common messages

message BasicGamePlayer {
  string id = 1;
  string username = 2;
}

message Team {
  string id = 1;
  string friendly_name = 2;
  // color as hex
  int32 color = 3;

  // player_ids of type UUID
  // these are stored as IDs as the BasicGamePlayer will already be present in the game start data
  repeated string player_ids = 4;
}

//                          //
// Specific common messages
//                         //

// Not for a specific time

message CommonGameTeamData {
  repeated Team teams = 1;
}

// Common - Start

// Common - Update

// Common - Finish

message CommonGameFinishWinnerData {
  // winners of type UUID (as a string)
  repeated string winner_ids = 1;
  // losers may be empty if the game doesn't define losers. Type is UUID (as a string)
  repeated string loser_ids = 2;
}

//                              //
// Specific game mode messages
//                             //

// TODO Game mode: TowerDefence - Finish (add more stuff)

message TowerDefenceHealthData {
  int32 max_health = 1;
  int32 blue_health = 2;
  int32 red_health = 3;
}

message TowerDefenceStartData {
  TowerDefenceHealthData health_data = 1;
}

message TowerDefenceUpdateData {
  TowerDefenceHealthData health_data = 1;
}

message TowerDefenceFinishData {
  TowerDefenceHealthData health_data = 1;
}

// TODO Game mode: Battle - Start, Update, Finish

// Game Mode - BlockSumo

message BlockSumoUpdateData {
  BlockSumoScoreboard scoreboard = 1;
}

message BlockSumoFinishData {
  BlockSumoScoreboard scoreboard = 1;
}

message BlockSumoScoreboard {
  message Entry {
    int32 remaining_lives = 2;
    int32 kills = 3;
    int32 final_kills = 4;
  }

  // entries map of playerId UUIDs to a scoreboard Entry
  map<string, Entry> entries = 1;
}

// TODO Game Mode - Minesweeper

message MinesweeperStartData {
  int64 total_mines = 1;
  // total_blocks is the total number of blocks in the game that can be revealed - e.g. a 10x10 board would be 100
  int64 total_blocks = 2;
  // TODO maybe we have a difficulty here?
}

// MinesweeperUpdateData
// * You can calculate game progress by doing ((uncovered_mines) / total_mines) * 100. Note that total_mines is not in this message.
message MinesweeperUpdateData {
  int32 remaining_mines = 1;
  int32 placed_flags = 2;
  // blocks_revealed the number of blocks revealed - this can be used to calculate % progress based on the start data
  int32 blocks_revealed = 3;
}

// MinesweeperFinishData
message MinesweeperFinishData {
  // winner_data if the game is won, all players are winners. If the game is lost, all players are losers.
  CommonGameFinishWinnerData winner_data = 1;
}

// Game Mode - Marathon

message MarathonUpdateData {
  // current_time can be used for an ongoing run to calculate the time taken accurately
  google.protobuf.Timestamp current_time = 1;

  // current_run is the run that is currently ongoing - it will be null if they are standing on the start line
  MarathonRun current_run = 2;

  // completed_runs is a list of runs that have been completed in this session
  repeated MarathonRun completed_runs = 3;
}

message MarathonRun {
  // distance in blocks
  int32 distance = 1;
  google.protobuf.Timestamp start_time = 2;
  // end_time will be null if the run is ongoing
  google.protobuf.Timestamp end_time = 3;
}

message MarathonFinishData {
  repeated MarathonRun runs = 1;
}

// Game Mode - Parkour Tag
