syntax = "proto3";
package emortal.grpc;

option java_package = "dev.emortal.api.grpc.mcplayer";
option java_outer_classname = "McPlayerProto";
option go_package = "github.com/emortalmc/proto-specs/gen/go/grpc/mcplayer";

import "mc_player/models.proto";
import "common_models.proto";

service McPlayer {
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse) {}
  rpc GetPlayers(GetPlayersRequest) returns (GetPlayersResponse) {}
  rpc GetPlayerByUsername(PlayerUsernameRequest) returns (GetPlayerByUsernameResponse) {}
  rpc SearchPlayersByUsername(SearchPlayersByUsernameRequest) returns (SearchPlayersByUsernameResponse) {}
  rpc GetLoginSessions(GetLoginSessionsRequest) returns (LoginSessionsResponse) {}

  rpc GetStatTotalUniquePlayers(GetStatTotalUniquePlayersRequest) returns (GetStatTotalUniquePlayersResponse) {}
  rpc GetStatTotalPlaytime(GetStatTotalPlaytimeRequest) returns (GetStatTotalPlaytimeResponse) {}

  rpc AddExperienceToPlayers(AddExperienceToPlayersRequest) returns (AddExperienceToPlayersResponse) {}
  rpc GetPlayerExperience(GetPlayerExperienceRequest) returns (GetPlayerExperienceResponse) {}
}

service PlayerTracker {
  rpc GetPlayerServers(GetPlayerServersRequest) returns (GetPlayerServersResponse); // mass retrieve servers for x... players

  rpc GetServerPlayers(GetServerPlayersRequest) returns (GetServerPlayersResponse);
  rpc GetPlayerCount(GetPlayerCountRequest) returns (GetPlayerCountResponse);
  // GetFleetPlayerCounts returns the player count for each fleet
  rpc GetFleetPlayerCounts(GetFleetsPlayerCountRequest) returns (GetFleetsPlayerCountResponse);

  // Summary methods

  rpc GetGlobalPlayersSummary(GetGlobalPlayersSummaryRequest) returns (GetGlobalPlayersSummaryResponse);
}

message GetPlayerRequest {
  string player_id = 1;
}

message GetPlayerResponse {
  model.McPlayer player = 1;
}

message GetPlayersRequest {
  repeated string player_ids = 1;
}

message GetPlayersResponse {
  repeated model.McPlayer players = 1;
}

message PlayerUsernameRequest {
  string username = 1; // ignore case when using the username
}

message GetPlayerByUsernameResponse {
  model.McPlayer player = 1;
}

message McPageablePlayerRequest {
  string player_id = 1;
  uint32 page = 2;
  uint32 size = 3;
}

message SearchPlayersByUsernameRequest {
  string issuer_id = 1;
  string search_username = 2;
  // starts with 0
  model.Pageable pageable = 3;
  FilterMethod filter_method = 4;

  // excluded_player_ids is optional, if provided, will exclude these players from the search
  // so you still get a full page of results even if some of the players are excluded.
  // Type: repeated uuid
  repeated string excluded_player_ids = 5;

  enum FilterMethod {
    NONE = 0;
    ONLINE = 1;
    FRIENDS = 2;
  }
}

message SearchPlayersByUsernameResponse {
  repeated model.McPlayer players = 1;
  model.PageData page_data = 2;
}

message GetLoginSessionsRequest {
  string player_id = 1;
  model.Pageable pageable = 2;
}

message LoginSessionsResponse {
  repeated model.LoginSession sessions = 1;
  model.PageData page_data = 2;
}

// Player stats

message GetStatTotalUniquePlayersRequest {}

message GetStatTotalUniquePlayersResponse {
  int64 count = 1;
}

message GetStatTotalPlaytimeRequest {}

message GetStatTotalPlaytimeResponse {
  int64 playtime_hours = 1;
}

// PlayerTracker

message GetPlayerServersRequest {
  repeated string player_ids = 1;
}

message GetPlayerServersResponse {
  map<string, model.CurrentServer> player_servers = 1;
}

message GetServerPlayersRequest {
  string server_id = 1;
}

message GetServerPlayersResponse {
  repeated model.OnlinePlayer online_players = 1;
}

message GetPlayerCountRequest {
  // server_id is optional, if not provided, will fall back to server_types
  optional string server_id = 1;

  // fleet_names is optional, if not provided, will fall back to global count
  repeated string fleet_names = 2;
}

message GetPlayerCountResponse {
  int64 count = 1;
}

message GetFleetsPlayerCountRequest {
  repeated string fleet_names = 1;
}

message GetFleetsPlayerCountResponse {
  map<string, int64> fleet_player_counts = 1;
}

message GetGlobalPlayersSummaryRequest {
  // server_id is optional, if not provided, will fall back to server_types
  optional string server_id = 1;

  // fleet_names is optional, if not provided, will fall back to global
  repeated string fleet_names = 2;
}

message GetGlobalPlayersSummaryResponse {
  repeated model.OnlinePlayer players = 1;
}

message AddExperienceToPlayersRequest {
  // player_ids of type UUID
  repeated string player_ids = 1;

  uint64 experience = 2;
}

message AddExperienceToPlayersResponse {
  uint64 experience = 1;
}

message GetPlayerExperienceRequest {
  // player_id of type UUID
  string player_id = 1;
}

message GetPlayerExperienceResponse {
  uint64 experience = 1;
}
